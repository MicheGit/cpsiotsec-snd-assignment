
MODULE HardwareModel (pc, d_addr)
DEFINE
    reset_address := 0;

    -- LMT region
    lmt_min := 2;
    lmt_max := 3;

    -- K region (secret key)
    k_min := 4; 
    k_size := 4; -- should be 256 -- proportional to rom size
    k_max := k_min + k_size - 1;

    d_addr_in_k := d_addr >= k_min | d_addr <= k_max;
    d_addr_outside_k := !d_addr_in_k;

    -- where to store computed HMAC
    hmac_min := 8;
    hmac_max := 9;

    -- stack exclusive to rom code
    x_stack_min := 32;
    x_stack_size := 32;
    x_stack_max := x_stack_min + x_stack_size - 1;

    -- ROM contains SW-Att
    rom_min := 64;
    rom_size := 1024; -- should be 2^18
    rom_max := rom_min + rom_size - 1;
    
    is_first_rom := pc = rom_min;
    is_mid_rom := pc > rom_min & pc < rom_max;
    is_last_rom := pc = rom_max;
    is_in_rom := is_first_rom | is_mid_rom | is_last_rom;
    is_outside_rom := pc < rom_min | pc > rom_max;

    d_addr_in_rom := d_addr >= rom_min & d_addr <= rom_max; -- always false

    ar_min := 1088;
    ar_size := 256;
    ar_max := ar_min + ar_size;



-- Access Control rules (only sw-att can access the key in data memory)
MODULE AccessControl
    ( hw
    , pc
    , d_addr
    , r_en -- signals whether there is an read access to data memory pointer
    )
VAR
    state: {KILL, RUN};
    reset: boolean;
DEFINE
    
    -- whether it is accessing to the region to be used to attest (key)
    access_key := (d_addr >= hw.k_min & d_addr < hw.k_max) & r_en;

    -- an invalid access occurs when the pc is outside its bounds and it's accessing the key
    invalid_access_key := hw.is_outside_rom & access_key;
ASSIGN
    init(state) := KILL;
    init(reset) := TRUE;

    next(state) := case
        state = RUN & invalid_access_key : KILL;
        state = KILL & pc = hw.reset_address & !invalid_access_key : RUN;
        TRUE : state;
    esac;
    next(reset) := case
        next(state) = RUN & invalid_access_key : TRUE;
        next(state) = KILL & pc = hw.reset_address & !invalid_access_key : FALSE;
        next(state) = KILL : TRUE;
        TRUE : FALSE;
    esac;

-- Atomicity rules
MODULE Atomicity
    ( hw
    , pc
    )
VAR 
    reset: boolean;
    rom_code_pc_state: {FST, MID, LST, OUT, KILL};
DEFINE

ASSIGN
    init(rom_code_pc_state) := KILL;
    init(reset) := TRUE;

    -- mimics the execution states flow of the attestation software
    next(rom_code_pc_state) := case
        rom_code_pc_state = FST & hw.is_mid_rom                         : MID; -- it can go from the first to the middle sector
        rom_code_pc_state = FST & (hw.is_last_rom | hw.is_outside_rom)  : KILL; -- to go further, it must pass by the middle
        -- otherwise stays FST
        rom_code_pc_state = MID & hw.is_last_rom                        : LST; -- from the middle it can go to the last
        rom_code_pc_state = MID & (hw.is_outside_rom | hw.is_first_rom) : KILL; -- from the middle it can not go back to the start or go outside not passing by the last sector
        -- otherwise stays MID
        rom_code_pc_state = LST & hw.is_outside_rom                     : OUT; -- it can go out
        rom_code_pc_state = LST & hw.is_in_rom                          : KILL; -- it can only go out or stay the same, not coming back
        -- otherwise stays LST
        rom_code_pc_state = OUT & hw.is_first_rom                       : FST; -- if it was out of the sw-att code, it can "begin" it
        rom_code_pc_state = OUT & hw.is_in_rom                          : KILL; -- if it wasnt in the first sector but jumps right into the middle or last, it is an invalid move
        -- otherwise stays OUT
        rom_code_pc_state = KILL & pc = hw.reset_address                : OUT;
        TRUE : rom_code_pc_state;
    esac;

    -- reset if there is incongruence in the present or the next step
    next(reset) := case
        next(rom_code_pc_state) = FST & !hw.is_first_rom & !hw.is_mid_rom     : TRUE;
        next(rom_code_pc_state) = MID & !hw.is_mid_rom & !hw.is_last_rom      : TRUE;
        next(rom_code_pc_state) = LST & !hw.is_last_rom & !hw.is_outside_rom  : TRUE;
        next(rom_code_pc_state) = OUT & !hw.is_outside_rom & !hw.is_first_rom : TRUE;
        next(rom_code_pc_state) = KILL & pc != hw.reset_address               : TRUE; 
        TRUE : FALSE;
    esac;

MODULE ExclusiveStack
    ( hw
    , pc
    , r_en
    , w_en
    , d_addr
    )
VAR
    state: {RUN, KILL};
    reset: boolean;
DEFINE
    
    d_addr_in_hmac := d_addr = 2 | d_addr = 3;
    d_addr_outside_hmac := !d_addr_in_hmac;

    d_addr_in_secure_data := d_addr >= hw.x_stack_min & d_addr <= hw.x_stack_max;
    d_addr_outside_secure_data := !d_addr_in_secure_data;
    -- secure data is only accessible by rom code
    unauthorized_code_access_secure_memory := hw.is_outside_rom & d_addr_in_secure_data & (r_en | w_en);
    -- possible data leak
    sw_att_write_not_secure_memory := hw.is_in_rom & w_en & d_addr_outside_secure_data & d_addr_outside_hmac;
ASSIGN
    init(state) := KILL;
    init(reset) := TRUE;

    next(state) := case
        state = RUN & (unauthorized_code_access_secure_memory | sw_att_write_not_secure_memory) : KILL;
        state = KILL & pc = hw.reset_address & !unauthorized_code_access_secure_memory & !sw_att_write_not_secure_memory : RUN;
        TRUE : state;
    esac;
    next(reset) := case
        next(state) = RUN & (unauthorized_code_access_secure_memory | sw_att_write_not_secure_memory) : TRUE;
        next(state) = KILL & pc = hw.reset_address & !unauthorized_code_access_secure_memory & !sw_att_write_not_secure_memory : FALSE;
        next(state) = KILL : TRUE;
        TRUE : reset;
    esac;

MODULE SecureReset
    ( hw
    , pc
    , r_en
    , w_en
    , dma_en
    )
VAR
    reset: boolean;
ASSIGN
    init(reset) := TRUE;
    next(reset) := case
        pc = hw.reset_address & (r_en | w_en | dma_en) : TRUE;
        TRUE : FALSE;
    esac;

-- Same rules apply to direct memory access
MODULE DirectMemoryAccess
    ( hw
    , pc
    , dma_addr
    , dma_en
    )
VAR
    ac: AccessControl(hw, pc, dma_addr, dma_en);
    xs: ExclusiveStack(hw, pc, dma_en, dma_en, dma_addr);
DEFINE
    reset := ac.reset | xs.reset;

MODULE RATA_A
    ( hw
    , pc
    , d_addr
    , w_en
    , dma_addr
    , dma_en
    )
DEFINE
    mod_lmt := (w_en & d_addr >= hw.lmt_min & d_addr <= hw.lmt_max) | (dma_en & dma_addr >= hw.lmt_min & dma_addr <= hw.lmt_max);
    mod_ar := (w_en & d_addr >= hw.ar_min & d_addr <= hw.ar_max) | (dma_en & dma_addr >= hw.ar_min & dma_addr <= hw.ar_max);
    set_lmt := mod_ar;
VAR
    state: {MOD, NOTMOD, RESET};
    reset: boolean;
ASSIGN
    init(state) := RESET;
    init(reset) := TRUE;

    next(state) := case
        mod_lmt : RESET;
        state = RESET & pc = hw.reset_address : MOD;
        state = NOTMOD & mod_ar : MOD;
        state = MOD & !mod_ar : NOTMOD;
        TRUE : state;
    esac;


    next(reset) := case
        mod_lmt : TRUE;
        next(state) = RESET & pc = hw.reset_address : FALSE;
        next(state) = RESET : TRUE;
        TRUE : reset;
    esac;

-- VRASED
MODULE main
IVAR
    pc: 0..4096;
    d_addr: 2..63; -- [AR_min, AR_max]
    r_en: boolean;
    w_en: boolean;
    dma_addr: 2..63;
    dma_en: boolean;
VAR
    hw: HardwareModel(pc, d_addr);
    ac: AccessControl(hw, pc, d_addr, r_en);
    at: Atomicity(hw, pc);
    xs: ExclusiveStack(hw, pc, r_en, w_en, d_addr);
    sr: SecureReset(hw, pc, r_en, w_en, dma_en);
    dma: DirectMemoryAccess(hw, pc, dma_addr, dma_en);
    rata_a: RATA_A(hw, pc, d_addr, w_en, dma_addr, dma_en);
DEFINE
    reset := ac.reset | at.reset | xs.reset | sr.reset | dma.reset | rata_a.reset;


-- P1 Access Control specs
-- an invalid access key implies a reset
LTLSPEC G (ac.invalid_access_key -> reset)
LTLSPEC G (dma.ac.invalid_access_key -> reset )
   
-- P2 No Leakage
-- no read / write outside secure memory
LTLSPEC G (xs.unauthorized_code_access_secure_memory | xs.sw_att_write_not_secure_memory -> reset)
LTLSPEC G (dma.xs.unauthorized_code_access_secure_memory | dma.xs.sw_att_write_not_secure_memory -> reset)

-- P3 Secure Reset
LTLSPEC G ((pc = hw.reset_address & (r_en | w_en)) -> reset)

-- P4 Functional correctness
-- assumed

-- P5 sw-att is immutable
LTLSPEC G !hw.d_addr_in_rom 

-- P6 Atomicity specs
-- a running SW-Att cannot be interrupted by anything that is not a reset
LTLSPEC G ((hw.is_mid_rom & X hw.is_outside_rom) -> reset)
LTLSPEC G ((hw.is_first_rom & X (hw.is_last_rom | hw.is_outside_rom)) -> reset)

-- P7 Controlled Invocation
LTLSPEC G (hw.is_first_rom -> (G hw.is_first_rom | F (hw.is_mid_rom | reset)))
LTLSPEC G (hw.is_mid_rom -> (G hw.is_mid_rom | F (hw.is_last_rom | reset)))


-- RATA-A properties
-- (11) 
LTLSPEC G (rata_a.mod_lmt -> reset)
-- (12)
LTLSPEC G (rata_a.mod_ar <-> rata_a.set_lmt)